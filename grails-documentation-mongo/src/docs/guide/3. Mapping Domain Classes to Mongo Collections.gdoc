The way GORM for Mongo works is to map each domain class to a Mongo collection. For example given a domain class such as:

{code:java}
class Person {
  String firstName
  String lastName
  static hasMany = [pets:Pet]
}
{code}

This will map onto a Mongo [DBCollection|http://api.mongodb.org/java/current/com/mongodb/DBCollection.html] called "person".

It is quite common in Mongo to embed documents within documents (nested documents). This can be done with GORM embedded types:

{code:java}
class Person {
  String firstName
  String lastName
  Address address
  static embedded = ['address']
}
{code}

You can also map lists and maps of basic types (such as strings) simply by defining the appropriate collection type:

{code:java}
class Person {
	List<String> friends
	Map pets
}

...

new Person(friends:['Fred', 'Bob'], pets:[chuck:"Dog", eddie:'Parrot']).save(flush:true)
{code}

Basic collection types as stored as native ArrayList and BSON documents within the Mongo documents.

You may wish to customize how a domain class maps onto a @DBCollection@. This is possible using the @mapping@ block as follows:

{code:java}
class Person {
   ..
  static mapping = {
    collection "mycollection"
    database "mydb"
  }
}
{code}

In this example we see that the @Person@ entity has been mapped to a collection called "mycollection" in a database called "mydb".